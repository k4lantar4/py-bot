version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m uvicorn app.main:app --host 0.0.0.0 --port 8000
    ports:
      - "${HOST:-0.0.0.0}:8000:8000"
    volumes:
      - ./backend:/app
      - ./data:/data
    environment:
      - PYTHONUNBUFFERED=1
      - DEBUG=1
      - SECRET_KEY=your-secret-key
      - ALLOWED_HOSTS=${PUBLIC_IP:-0.0.0.0},127.0.0.1,backend,${DOMAIN:-*}
      - CORS_ALLOWED_ORIGINS=http://${PUBLIC_IP:-0.0.0.0}:3000,http://127.0.0.1:3000,http://${DOMAIN:-*}
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - REDIS_URL=redis://redis:6379/0
      - PUBLIC_URL=http://${PUBLIC_IP:-0.0.0.0}:8000
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "${HOST:-0.0.0.0}:3000:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://${PUBLIC_IP:-0.0.0.0}:8000/api/v1
      - HOST=0.0.0.0
      - PUBLIC_URL=http://${PUBLIC_IP:-0.0.0.0}:3000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    command: python /app/bot.py
    volumes:
      - ./bot:/app
      - ./data:/data
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ENVIRONMENT=production
      - PUBLIC_URL=http://${PUBLIC_IP:-0.0.0.0}:8000
    depends_on:
      - backend
      - db
      - redis
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    ports:
      - "${HOST:-0.0.0.0}:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "${HOST:-0.0.0.0}:6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge 