version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: temp_test_postgres
    environment:
      POSTGRES_DB: mrjbot
      POSTGRES_USER: mrjbot
      POSTGRES_PASSWORD: mrjbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mrjbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mrjbot_network

  redis:
    image: redis:7-alpine
    container_name: temp_test_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mrjbot_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: temp_test_backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mrjbot
      - DB_USER=mrjbot
      - DB_PASSWORD=mrjbot
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_EMAIL=admin@example.com
      - DJANGO_SUPERUSER_PASSWORD=admin
      - DJANGO_SETTINGS_MODULE=backend.config.settings
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mrjbot_network
    command: >
      sh -c "cd backend && python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: temp_test_bot
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mrjbot
      - DB_USER=mrjbot
      - DB_PASSWORD=mrjbot
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./bot:/app
    depends_on:
      backend:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mrjbot_network
    command: python main.py

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: temp_test_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - mrjbot_network

  nginx:
    image: nginx:alpine
    container_name: temp_test_nginx
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - mrjbot_network

volumes:
  postgres_data:
  redis_data:

networks:
  mrjbot_network:
    driver: bridge