#!/bin/bash

# رنگ‌ها برای خروجی
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # بدون رنگ

# مسیر نصب
INSTALL_DIR="/opt/mrjbot"
COMPOSE_FILE="$INSTALL_DIR/docker-compose.yml"
BACKUP_DIR="$INSTALL_DIR/backups"

# تابع نمایش راهنما
show_help() {
    echo -e "${BLUE}===================================================${NC}"
    echo -e "${BLUE}MRJBot - ابزار خط فرمان${NC}"
    echo -e "${BLUE}===================================================${NC}"
    echo -e "استفاده: mrjbot [دستور]"
    echo
    echo -e "دستورات:"
    echo -e "  ${GREEN}start${NC}              شروع تمام سرویس‌ها"
    echo -e "  ${GREEN}stop${NC}               توقف تمام سرویس‌ها"
    echo -e "  ${GREEN}restart${NC}            راه‌اندازی مجدد تمام سرویس‌ها"
    echo -e "  ${GREEN}status${NC}             نمایش وضعیت سرویس‌ها"
    echo -e "  ${GREEN}logs [service]${NC}     نمایش لاگ‌های سرویس (اختیاری: نام سرویس)"
    echo -e "  ${GREEN}shell [service]${NC}    ورود به شل کانتینر (اختیاری: نام سرویس)"
    echo -e "  ${GREEN}update${NC}             بروزرسانی سیستم"
    echo -e "  ${GREEN}backup${NC}             تهیه پشتیبان از سیستم"
    echo -e "  ${GREEN}restore [file]${NC}     بازیابی پشتیبان (نام فایل پشتیبان)"
    echo -e "  ${GREEN}set-license [code]${NC} تنظیم کد لایسنس"
    echo -e "  ${GREEN}test${NC}               اجرای تست‌های سیستم"
    echo -e "  ${GREEN}help${NC}               نمایش این راهنما"
    echo
}

# تابع بررسی پیش‌نیازها
check_prerequisites() {
    if [ ! -f "$COMPOSE_FILE" ]; then
        echo -e "${RED}خطا: فایل docker-compose.yml در مسیر $COMPOSE_FILE یافت نشد.${NC}"
        echo -e "${YELLOW}لطفاً اطمینان حاصل کنید که MRJBot به درستی نصب شده است.${NC}"
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}خطا: Docker نصب نشده است.${NC}"
        echo -e "${YELLOW}لطفاً Docker را نصب کنید و دوباره تلاش کنید.${NC}"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}خطا: Docker Compose نصب نشده است.${NC}"
        echo -e "${YELLOW}لطفاً Docker Compose را نصب کنید و دوباره تلاش کنید.${NC}"
        exit 1
    fi
}

# تابع شروع سرویس‌ها
start_services() {
    echo -e "${BLUE}در حال شروع سرویس‌های MRJBot...${NC}"
    cd $INSTALL_DIR && docker-compose up -d
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}سرویس‌ها با موفقیت شروع شدند.${NC}"
    else
        echo -e "${RED}خطا در شروع سرویس‌ها.${NC}"
        exit 1
    fi
}

# تابع توقف سرویس‌ها
stop_services() {
    echo -e "${BLUE}در حال توقف سرویس‌های MRJBot...${NC}"
    cd $INSTALL_DIR && docker-compose down
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}سرویس‌ها با موفقیت متوقف شدند.${NC}"
    else
        echo -e "${RED}خطا در توقف سرویس‌ها.${NC}"
        exit 1
    fi
}

# تابع راه‌اندازی مجدد سرویس‌ها
restart_services() {
    echo -e "${BLUE}در حال راه‌اندازی مجدد سرویس‌های MRJBot...${NC}"
    cd $INSTALL_DIR && docker-compose restart
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}سرویس‌ها با موفقیت راه‌اندازی مجدد شدند.${NC}"
    else
        echo -e "${RED}خطا در راه‌اندازی مجدد سرویس‌ها.${NC}"
        exit 1
    fi
}

# تابع نمایش وضعیت سرویس‌ها
show_status() {
    echo -e "${BLUE}وضعیت سرویس‌های MRJBot:${NC}"
    cd $INSTALL_DIR && docker-compose ps
}

# تابع نمایش لاگ‌ها
show_logs() {
    if [ -z "$1" ]; then
        echo -e "${BLUE}نمایش لاگ‌های تمام سرویس‌ها:${NC}"
        cd $INSTALL_DIR && docker-compose logs --tail=100
    else
        echo -e "${BLUE}نمایش لاگ‌های سرویس $1:${NC}"
        cd $INSTALL_DIR && docker-compose logs --tail=100 $1
    fi
}

# تابع ورود به شل کانتینر
enter_shell() {
    if [ -z "$1" ]; then
        echo -e "${YELLOW}لطفاً نام سرویس را مشخص کنید.${NC}"
        echo -e "${BLUE}سرویس‌های موجود:${NC}"
        cd $INSTALL_DIR && docker-compose ps --services
        exit 1
    else
        echo -e "${BLUE}ورود به شل سرویس $1:${NC}"
        cd $INSTALL_DIR && docker-compose exec $1 /bin/bash || docker-compose exec $1 /bin/sh
    fi
}

# تابع بروزرسانی سیستم
update_system() {
    echo -e "${BLUE}در حال بروزرسانی MRJBot...${NC}"
    
    # تهیه پشتیبان قبل از بروزرسانی
    backup_system "pre-update"
    
    # بروزرسانی کد از مخزن
    cd $INSTALL_DIR
    git pull
    
    # بازسازی و راه‌اندازی مجدد کانتینرها
    docker-compose down
    docker-compose build
    docker-compose up -d
    
    echo -e "${GREEN}بروزرسانی با موفقیت انجام شد.${NC}"
    
    # ارسال اعلان به گروه ادمین تلگرام
    if [ -f "$INSTALL_DIR/.env" ]; then
        ADMIN_CHAT_ID=$(grep TELEGRAM_ADMIN_CHAT_ID $INSTALL_DIR/.env | cut -d '=' -f2)
        BOT_TOKEN=$(grep TELEGRAM_BOT_TOKEN $INSTALL_DIR/.env | cut -d '=' -f2)
        
        if [ ! -z "$ADMIN_CHAT_ID" ] && [ ! -z "$BOT_TOKEN" ]; then
            curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
                -d chat_id="$ADMIN_CHAT_ID" \
                -d text="🔥 نسخه جدید اومد، آپدیت شد! 🔥" > /dev/null
        fi
    fi
}

# تابع تهیه پشتیبان
backup_system() {
    # ایجاد دایرکتوری پشتیبان اگر وجود نداشته باشد
    mkdir -p $BACKUP_DIR
    
    # تعیین نام فایل پشتیبان
    BACKUP_NAME=${1:-"backup"}
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_FILE="$BACKUP_DIR/${BACKUP_NAME}_${TIMESTAMP}.tar.gz"
    
    echo -e "${BLUE}در حال تهیه پشتیبان از MRJBot...${NC}"
    
    # توقف سرویس‌ها
    cd $INSTALL_DIR && docker-compose stop
    
    # تهیه پشتیبان از فایل‌های پیکربندی و دیتابیس
    tar -czf $BACKUP_FILE -C $INSTALL_DIR .env docker-compose.yml backend/config/settings.py \
        $(docker volume ls -q | grep mrjbot)
    
    # شروع مجدد سرویس‌ها
    cd $INSTALL_DIR && docker-compose start
    
    echo -e "${GREEN}پشتیبان با موفقیت در $BACKUP_FILE ذخیره شد.${NC}"
}

# تابع بازیابی پشتیبان
restore_backup() {
    if [ -z "$1" ]; then
        echo -e "${YELLOW}لطفاً نام فایل پشتیبان را مشخص کنید.${NC}"
        echo -e "${BLUE}پشتیبان‌های موجود:${NC}"
        ls -la $BACKUP_DIR
        exit 1
    fi
    
    BACKUP_FILE="$BACKUP_DIR/$1"
    
    if [ ! -f "$BACKUP_FILE" ]; then
        echo -e "${RED}خطا: فایل پشتیبان $BACKUP_FILE یافت نشد.${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}در حال بازیابی پشتیبان از $BACKUP_FILE...${NC}"
    
    # توقف سرویس‌ها
    cd $INSTALL_DIR && docker-compose down
    
    # بازیابی پشتیبان
    tar -xzf $BACKUP_FILE -C $INSTALL_DIR
    
    # شروع مجدد سرویس‌ها
    cd $INSTALL_DIR && docker-compose up -d
    
    echo -e "${GREEN}پشتیبان با موفقیت بازیابی شد.${NC}"
}

# تابع تنظیم لایسنس
set_license() {
    if [ -z "$1" ]; then
        echo -e "${YELLOW}لطفاً کد لایسنس را وارد کنید.${NC}"
        exit 1
    fi
    
    LICENSE_CODE="$1"
    LICENSE_FILE="$INSTALL_DIR/license.key"
    
    echo "$LICENSE_CODE" > $LICENSE_FILE
    echo -e "${GREEN}کد لایسنس با موفقیت تنظیم شد.${NC}"
    
    # راه‌اندازی مجدد سرویس‌ها
    restart_services
}

# تابع اجرای تست‌ها
run_tests() {
    echo -e "${BLUE}در حال اجرای تست‌های MRJBot...${NC}"
    cd $INSTALL_DIR && ./run_tests.sh
}

# بررسی پیش‌نیازها
check_prerequisites

# پردازش دستورات
case "$1" in
    start)
        start_services
        ;;
    stop)
        stop_services
        ;;
    restart)
        restart_services
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs "$2"
        ;;
    shell)
        enter_shell "$2"
        ;;
    update)
        update_system
        ;;
    backup)
        backup_system "$2"
        ;;
    restore)
        restore_backup "$2"
        ;;
    set-license)
        set_license "$2"
        ;;
    test)
        run_tests
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        show_help
        exit 1
        ;;
esac

exit 0 